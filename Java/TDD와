# TDD와 단위테스트

## 목차
1. [TDD](#1-tdd)  
1-1. [TDD란?](#1-1-tdd란)  
1-2. [TDD 사용 이유?](#1-2-tdd-사용-이유)  
2. [단위 테스트](#2-단위-테스트)  
2-1. [테스트의 범위](#2-1-테스트의-범위)  
2-2. [단위 테스트 목적](#2-2-단위-테스트-목적)  
2-3. [좋은 단위 테스트](#2-3-좋은-단위-테스트)  

***
### 1. TDD
  - #### 1-1. TDD란?
    - Test-Driven Development, Kent Beck
    - `테스트 코드를 먼저 만들고, 실제 프로덕션 코드를 나중에 만드는 개발 방법`
    - 개발 프로세스  
      설계     →     테스트(코드작성)     →     개발(코드 작성)  
         ↖ 설계 수정 ↙  
         
    - 개발 사이클(Red, Green, Refactor)  
      ![image](https://user-images.githubusercontent.com/65080004/118387435-897dce00-b659-11eb-80b2-9f730e21a2a9.png)  
        
      Red : 실패하는 테스트 구현  
      Green : 테스트가 성공하도록 프로덕션 코드 구현  
      Refactor : 프로덕션 코드와 테스트 코드 리팩토링  
      
  - #### 1-2. TDD 사용 이유?
    1. 자연스럽게 테스트 커버리지가 높아진다.  
       테스트 커버리지가 높다해서 좋은 코드는 아니지만, 테스트 코드를 작성을 통해 실수나 오류를 잡아줄 수 있음  
    
    2. 오버 엔지니어링 방지  
       요구사항에서 필요한 만큼만 개발할 수 있음  
    
    3. 설계에 따른 피드백이 빠름  
  
### 2. 단위 테스트
  - #### 2-1. 테스트의 범위
    - 범위에 따른 분류(오른쪽으로 갈수록 범위가 줄어듦)     
      Acceptance(인수) > Stress/load(부하) > Function(기능) > Integration(통합) > Unit(단위)  
      
      1. 인수 테스트 : 고객 또는 대리인이 정의되어진 모든 목적에 부합되는지 확인해보고자 하는 검사  
      2. 부하 테스트 : 주어진 단위 시간 동안 어플리케이션이 얼마나 많은 요청을 처리할 수 있는지 검사  
      3. 기능 테스트 : 공개된 API의 가장 바깥쪽에 해당하는 코드 검사 (Controller 호출, Security, http)    
      4. 통합 테스트 : 여러 작업 단위가 연계뙨 워크플로우를 테스트 하기 위한 수단(객체 간, 서비스 간, 시스템 간)    
      5. 단위 테스트 : 가장 작은 단위의 테스트, 일반적으로 메서드 레벨  
                      검증이 필요한 코드에 대해 테스트 케이스를 작성하는 `절차 또는 프로세스`  
                      목적 코드의 완전성을 입증 해주기 때문에, 주요한 가치를 가짐
  
  - #### 2-2. 단위 테스트 목적
    1. 문제점 발견
    2. 쉬운 변경
    3. 품질 향상  
    4. 코드의 문서화(샘플 코드) - 예외 상황, 용도, 의존 관계를 한눈에 파악 가능             
  
  - #### 2-3. 좋은 단위 테스트
    - F.I.R.S.T 법칙
    
    - F : Fast(빠르게)  
          테스트 실행 속도가 빨라야 한다.   
    
    - I : Independent(독립적으로)  
          테스트가 서로 의존하게 되면 안됨  
    
    - R : Repeatable(반복 가능하게)  
          어떠한 환경에서도 반복이 가능해야 함  
    
    - S : Self-Validating(자가 검증하는)  
          성공인지 실패인지 결과를 반환해야함  
    
    - T : Timely(적시에)  
          테스트 코드를 먼저 만들고 그다음에 코드를 작성해야함  

## Reference   
  - [dpudpu TDD의 장점](https://www.youtube.com/watch?v=3LMmPXoGI9Q&t=152s)     
  - [10분 테코톡 TDD와 단위테스트](https://www.youtube.com/watch?v=3LMmPXoGI9Q&t=152s)  
  - [패스트캠퍼스 이규원 TDD](https://www.youtube.com/watch?v=N5WyUEwY0DY)  

***
[목차로 이동](https://github.com/youngho-j/TIL/blob/main/Java/README.md "Go README.md")
